@page
@model FReadinessModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
    <select id="releases">
        @foreach (var item in Model.Releases)
        {
            if (@item.ReleaseName == Model.CurrentRelease)
            {
                <option value="@item.ReleaseName" selected>@item.ReleaseName</option>
            }
            else
            {
                <option value="@item.ReleaseName">@item.ReleaseName</option>
            }
        }
    </select>

    <select id="areapath">
        @foreach (var item in Model.Teams)
        {
            <option value="@item">@item</option>
        }
    </select>

    <input type="text" id="datepicker" size="30">

    <button id="go">GO</button>

    <div>
        <canvas id="myChart" style="width:450px; height:430px;max-width:500px"></canvas>
        <script>

            var releasesData = @Json.Serialize(Model.Releases.ToArray());    

            var url = new URL(window.location.href);
            var mode = url.searchParams.get("mode");
            mode = (mode == null ? "" : mode.toLowerCase());

            function DrawChart(yData) {
                var xValues = ["Waiting for evaluation", "Waiting for groomimg", "Ready"];
                var yValues = yData;
                var barColors = ["red", "blue", "green"];
                var tags = ["WFE", "WFG", "OK"];


                var chart = new Chart("myChart", {
                    type: "doughnut",
                    data: {
                        labels: xValues,
                        datasets: [{
                            backgroundColor: barColors,
                            data: yValues,
                            tag: tags
                        }]
                    },
                    options: {
                        tooltips: {
                            enabled: mode == "widget"
                        },
                        legend: { display: mode != "widget" },
                        events: ['click'],
                        onClick: (e) => {
                            var activePoints = chart.getElementsAtEvent(e);
                            if (activePoints.length > 0) {
                                //get the internal index of slice in pie chart
                                var clickedElementindex = activePoints[0]["_index"];

                                //get specific label by index 
                                var tag = chart.data.datasets[0].tag[clickedElementindex];

                                if (mode == "widget") {
                                    window.open("selectedfeatures?release=" + $("#releases").val() + "&mode=" + tag)
                                }
                                else {
                                    $("table.data-table").addClass("hidden");
                                    $("#" + tag).removeClass("hidden");
                                }
                            }
                        },
                        plugins: {
                            datalabels: {
                                formatter: (value, ctx) => {
                                    let sum = 0;
                                    let dataArr = ctx.chart.data.datasets[0].data;
                                    dataArr.map(data => {
                                        sum += data;
                                    });
                                    let percentage = (value * 100 / sum).toFixed(2) + "%";
                                    return [percentage, value];
                                },
                                color: '#fff',
                            }
                        }
                    }
                });
            }

            function GetDisplayName(field) {
                var result = "";
                if (field != null) {
                    result = field.displayName;
                }
                return result;
            }

            function DrawTable(items, tag) {
                $("#" + tag).empty();
                $(items).each(function (index, value) {
                    $("#" + tag).append('<tr><td>' + value.id + '</td><td>' + value.fields['System.Title'] + '</td><td>' + GetDisplayName(value.fields['System.AssignedTo']) + '</td></tr>');
                });
            }

            function DrawTables(info) {
                DrawTable(info.waitingForEvaluation, "WFE");
                DrawTable(info.waitingForGrooming, "WFG");
                DrawTable(info.ready, "OK");
            }

            function DrawData(info) {
                DrawChart([info.waitingForEvaluation.length, info.waitingForGrooming.length, info.ready.length]);
                if (mode != "widget") {
                    DrawTables(info);
                }
                $("table.data-table").addClass("hidden");
            }

            $(document).ready(function () {

                var releaseIndex = $("#releases")[0].selectedIndex;

                $("#datepicker").datepicker();
                $("#datepicker").datepicker("option", "dateFormat", "yy-mm-dd");
                $("#datepicker").val(releasesData[releaseIndex].startDate.split('T')[0]);

                $("#releases").change(function () {
                    releaseIndex = $(this)[0].selectedIndex;
                    $("#datepicker").val(releasesData[releaseIndex].startDate.split('T')[0]);
                });

                $.ajax("api/Features/").done(function (info) {
                    DrawData(info);
                });


                $("#go").click(function () {
                    $.ajax("api/Features/?release=" + $("#releases").val() + "&areapath=" + $("#areapath").val() + "&date=" + $("#datepicker").val()).done(function (info) {
                        DrawData(info);
                    });
                });

            });
        </script>
    </div>

    <table id="WFE" class="data-table hidden"></table>

    <table id="WFG" class="data-table hidden"></table>

    <table id="OK" class="data-table hidden"></table>

</div>
